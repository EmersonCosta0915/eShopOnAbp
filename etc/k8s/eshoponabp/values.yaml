# Default values for eshoponabp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# administration:
  # env:
    # - name: "ADMIN_SPECIFIC_ENV_NAME"
    #   value: "ADMIN_SPECIFIC_ENV_VALUE"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

global:
  dotnetEnvironment: "Staging"
  imagePullPolicy: Never
  eshoponabpImageVersion: latest
  web: 
    domain: eshop-st-web
    url: https://eshop-st-web
    containerImage: "eshoponabp/app-web"
  publicWeb: 
    domain: eshop-st-public-web
    url: https://eshop-st-public-web
    containerImage: "eshoponabp/app-publicweb"
  authServer:
    domain: eshop-st-authserver
    url: https://eshop-st-authserver
    containerImage: "eshoponabp/app-authserver"
  identityService:
    domain: eshop-st-identity
    url: https://eshop-st-identity
    containerImage: "eshoponabp/service-identity"
    connString: "Server=es-st-sqldb,1433;Database=EShopOnAbp_Identity;User Id=sa;password=myPassw@rd;MultipleActiveResultSets=true"
  administrationService:
    domain: eshop-st-administration
    url: https://eshop-st-administration
    containerImage: "eshoponabp/service-administration"
    connString: "Server=es-st-sqldb,1433;Database=EShopOnAbp_Administration;User Id=sa;password=myPassw@rd;MultipleActiveResultSets=true"
  saasService:
    domain: eshop-st-saas
    url: https://eshop-st-saas
    containerImage: "eshoponabp/service-saas"
    connString: "Server=es-st-sqldb,1433;Database=EShopOnAbp_Saas;User Id=sa;password=myPassw@rd;MultipleActiveResultSets=true"
  gatewayWeb:
    domain: eshop-st-gateway-web
    url: https://eshop-st-gateway-web
    containerImage: "eshoponabp/gateway-web"
  gatewayPublicWeb:
    domain: eshop-st-gateway-public-web
    url: https://eshop-st-gateway-public-web
    containerImage: "eshoponabp/gateway-publicweb"
  gatewayInternal:
    domain: eshop-st-gateway-internal
    url: https://eshop-st-gateway-internal
    containerImage: "eshoponabp/gateway-internal"
  redisConfiguration: "es-st-redis"
  rabbitMqHostName: "es-st-rabbitmq"
  elasticSearchUrl: ""
  nginxProxyBufferSize: "32k"
  nginxProxyBuffersNumber: "8"
  internalAuthServerAuthority: "http://eshop-st-authserver"
  internalAuthServerRequireHttpsMetadata: "false"
  stringEncryptionDefaultPassPhrase: "gsKnGZ041HLL4IM8"